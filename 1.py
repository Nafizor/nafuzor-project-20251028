import telebot
from telebot import types
from types import SimpleNamespace as _SimpleNS
import sqlite3
from datetime import datetime, timedelta
import random
import string
import os
import csv
import config
import photos
import threading
import pytz
import re  # Added for phone validation
import requests
import uuid
import json

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö–æ–ª–¥–∞
try:
    MIN_HOLD_MINUTES = int(getattr(config, 'MIN_HOLD_MINUTES', 54))
except Exception:
    MIN_HOLD_MINUTES = 54

def adapt_datetime(dt):
    return dt.isoformat()

sqlite3.register_adapter(datetime, adapt_datetime)

def convert_datetime(s):
    if isinstance(s, bytes):
        s = s.decode('utf-8')
    return datetime.fromisoformat(s)

sqlite3.register_converter("DATETIME", convert_datetime)

bot = telebot.TeleBot(config.BOT_TOKEN)

conn = sqlite3.connect('bot.db', check_same_thread=False, detect_types=sqlite3.PARSE_DECLTYPES)
cursor = conn.cursor()

# Initialize database tables
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    reputation REAL DEFAULT 10.0,
    balance REAL DEFAULT 0.0,
    subscription_type TEXT,
    subscription_end DATETIME,
    referral_code TEXT,
    referrals_count INTEGER DEFAULT 0,
    profit_level TEXT DEFAULT '–Ω–æ–≤–∏—á–æ–∫',
    card_number TEXT,
    cvv TEXT,
    card_balance REAL DEFAULT 0.0,
    card_status TEXT DEFAULT 'inactive',
    card_password TEXT,
    card_activation_date DATETIME,
    phone_number TEXT,
    last_activity DATETIME,
    api_token TEXT,
    block_reason TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS queue (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT UNIQUE,
    added_time DATETIME,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS working (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT UNIQUE,
    start_time DATETIME,
    admin_id INTEGER,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS successful (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT,
    hold_time TEXT,
    acceptance_time DATETIME,
    flight_time DATETIME,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS blocked (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS referrals (
    referer_id INTEGER,
    referee_id INTEGER,
    PRIMARY KEY (referer_id, referee_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS withdraw_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    status TEXT DEFAULT 'pending',
    created_at DATETIME,
    paid_at DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS deposit_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    created_at DATETIME NOT NULL,
    request_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    action TEXT,
    timestamp DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admin_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    admin_id INTEGER,
    action TEXT,
    timestamp DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS status (
    key TEXT PRIMARY KEY,
    value TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS card_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    timestamp DATETIME,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS transfers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_user_id INTEGER,
    to_user_id INTEGER,
    amount REAL,
    timestamp DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    sub_type TEXT,
    amount REAL,
    invoice_id TEXT,
    payload TEXT,
    status TEXT DEFAULT 'pending',
    transaction_id TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS checks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    creator_id INTEGER,
    amount REAL,
    unique_code TEXT UNIQUE,
    description TEXT,
    password TEXT,
    image_file_id TEXT,
    require_subs TEXT,
    require_premium INTEGER DEFAULT 0,
    activated_by INTEGER,
    activated_at DATETIME
)
''')

# Add columns if missing
try:
    cursor.execute("ALTER TABLE checks ADD COLUMN unique_code TEXT UNIQUE")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN description TEXT")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN password TEXT")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN image_file_id TEXT")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN require_subs TEXT")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN require_premium INTEGER DEFAULT 0")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN activated_by INTEGER")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE checks ADD COLUMN activated_at DATETIME")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE payments ADD COLUMN payload TEXT")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE withdraw_requests ADD COLUMN created_at DATETIME")
    conn.commit()
except sqlite3.OperationalError:
    pass

try:
    cursor.execute("ALTER TABLE withdraw_requests ADD COLUMN paid_at DATETIME")
    conn.commit()
except sqlite3.OperationalError:
    pass

cursor.execute("INSERT OR IGNORE INTO status (key, value) VALUES ('work_status', 'Full work üü¢')")
conn.commit()

# Add initial admin
cursor.execute("INSERT OR IGNORE INTO admins (id) VALUES (?)", (config.ADMIN_IDS[0],))
conn.commit()

pending_activations = {}  # To store admin_id for pending activations
pending_timers = {}  # To store timers for cancellation

# –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è pending steps (—á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π next_step_handler –∏ –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
pending_steps = {}

def register_next_step(chat_id, handler, *args):
    pending_steps[chat_id] = (handler, args)

def clear_pending_step(chat_id):
    if chat_id in pending_steps:
        del pending_steps[chat_id]

def is_subscribed(user_id):
    try:
        member = bot.get_chat_member(config.CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

def generate_referral_code(user_id):
    return f"ref_{user_id}"

def get_profit_level(referrals, is_admin=False):
    if is_admin:
        return 'ADMIN FAX'
    if referrals < 10:
        return '–Ω–æ–≤–∏—á–æ–∫'
    elif referrals < 30:
        return '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
    elif referrals < 60:
        return '–≤–æ—Ä–∫–µ—Ä'
    elif referrals < 90:
        return 'VIP WORK'
    else:
        return 'VIP WORK'

def is_admin(user_id):
    cursor.execute("SELECT * FROM admins WHERE id = ?", (user_id,))
    return cursor.fetchone() is not None

tz = pytz.timezone('Europe/Moscow')

def log_action(user_id, action):
    cursor.execute("INSERT INTO logs (user_id, action, timestamp) VALUES (?, ?, ?)", (user_id, action, datetime.now(tz)))
    conn.commit()

def log_admin_action(admin_id, action):
    cursor.execute("INSERT INTO admin_logs (admin_id, action, timestamp) VALUES (?, ?, ?)", (admin_id, action, datetime.now(tz)))
    conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        columns = [desc[0] for desc in cursor.description]
        return dict(zip(columns, row))
    return None

def update_user(user_id, **kwargs):
    set_clause = ', '.join(f"{k} = ?" for k in kwargs)
    values = list(kwargs.values()) + [user_id]
    cursor.execute(f"UPDATE users SET {set_clause} WHERE id = ?", values)
    conn.commit()

def get_queue():
    cursor.execute("SELECT * FROM queue ORDER BY added_time ASC")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_user_queue(user_id):
    cursor.execute("SELECT * FROM queue WHERE user_id = ? ORDER BY added_time ASC", (user_id,))
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_working(user_id=None):
    if user_id:
        cursor.execute("SELECT * FROM working WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("SELECT * FROM working")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_successful(user_id=None):
    if user_id:
        cursor.execute("SELECT * FROM successful WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("SELECT * FROM successful")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_blocked(user_id=None):
    if user_id:
        cursor.execute("SELECT * FROM blocked WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("SELECT * FROM blocked")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_status(key):
    cursor.execute("SELECT value FROM status WHERE key = ?", (key,))
    row = cursor.fetchone()
    return row[0] if row else None

def set_status(key, value):
    cursor.execute("REPLACE INTO status (key, value) VALUES (?, ?)", (key, value))
    conn.commit()

def generate_card_number():
    return ''.join(random.choices(string.digits, k=16))

def generate_cvv():
    return ''.join(random.choices(string.digits, k=3))

def generate_api_token(user_id):
    return f"{user_id}:{str(uuid.uuid4())}"

def calculate_hold(accept_time, flight_time):
    if isinstance(accept_time, str):
        accept_time = datetime.fromisoformat(accept_time)
    if isinstance(flight_time, str):
        flight_time = datetime.fromisoformat(flight_time)
    delta = flight_time - accept_time
    minutes = delta.total_seconds() / 60
    if minutes >= MIN_HOLD_MINUTES:
        hours = int(minutes // 60)
        mins = int(minutes % 60)
        return f"{hours:02d}:{mins:02d}"
    return None

def get_price_increase(sub_type):
    if not sub_type:
        return config.PRICES['hour'], config.PRICES['30min']
    sub = config.SUBSCRIPTIONS.get(sub_type, {})
    return sub.get('price_increase_hour', 0), sub.get('price_increase_30min', 0)

def sort_queue(queue):
    def key_func(item):
        user = get_user(item['user_id'])
        rep = user['reputation']
        sub = user['subscription_type']
        priority = 0
        if sub == 'VIP Nexus':
            priority = 4
        elif sub == 'Prime Plus':
            priority = 3
        elif sub == 'Gold Tier':
            priority = 2
        elif sub == 'Elite Access':
            priority = 1
        return (-priority, -rep, item['added_time'])
    return sorted(queue, key=key_func)

def show_main_menu(chat_id, edit_message_id=None):
    clear_pending_step(chat_id)  # –û—á–∏—â–∞–µ–º pending –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    user = get_user(chat_id)
    if not user:
        return
    username = user['username']
    status = get_status('work_status')
    reputation = user['reputation']
    balance = user['balance']
    queue_count = len(get_queue())
    user_queue_count = len(get_user_queue(chat_id))
    caption = f"@{username} | Full Work\n‚û¢–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–∞: {status}\n‚û£–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n‚û¢–ë–∞–ª–∞–Ω—Å: {balance}\n‚ïì–û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å: {queue_count}\n‚ïë\n‚ïö–¢–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏: {user_queue_count}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üöÄ", callback_data="add_number"), types.InlineKeyboardButton("–ú–æ–∏ –Ω–æ–º–µ—Ä–∞ üì±", callback_data="my_numbers"))
    markup.add(types.InlineKeyboardButton("–û—á–µ—Ä–µ–¥—å üîÑ", callback_data="queue"), types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stats"))
    markup.row(types.InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile"))
    if edit_message_id:
        bot.edit_message_media(chat_id=chat_id, message_id=edit_message_id, media=types.InputMediaPhoto(photos.PHOTOS['start'], caption=caption), reply_markup=markup)
    else:
        bot.send_photo(chat_id, photos.PHOTOS['start'], caption=caption, reply_markup=markup)

@bot.message_handler(commands=['start'])
def handle_start(message):
    clear_pending_step(message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    param = message.text.split()[1] if len(message.text.split()) > 1 else ""
    if param.startswith("check_"):
        handle_check_activation(message, param[6:])
        return
    if message.from_user.username is None:
        bot.send_message(message.chat.id, "üìº–í–∞—à username –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –≤–∞–º –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏:\n\n‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏->–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è->–£–∫–∞–∑—ã–≤–∞–µ—Ç–µ username.\n\nüåê–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    user_id = message.chat.id
    username = message.from_user.username or str(user_id)
    ref = param if param and param.startswith('ref_') else None
    user = get_user(user_id)
    if not user:
        referral_code = generate_referral_code(user_id)
        cursor.execute("INSERT INTO users (id, username, referral_code, last_activity, profit_level) VALUES (?, ?, ?, ?, ?)", (user_id, username, referral_code, datetime.now(tz), '–Ω–æ–≤–∏—á–æ–∫'))
        conn.commit()
        if ref:
            referer_id = int(ref[4:])
            if referer_id != user_id:
                cursor.execute("INSERT OR IGNORE INTO referrals (referer_id, referee_id) VALUES (?, ?)", (referer_id, user_id))
                conn.commit()
                referer = get_user(referer_id)
                update_user(referer_id, balance=referer['balance'] + 0.5, referrals_count=referer['referrals_count'] + 1)
                referrals = get_user(referer_id)['referrals_count']
                profit = get_profit_level(referrals, is_admin=is_admin(referer_id))
                update_user(referer_id, profit_level=profit)
                bot.send_message(referer_id, f"+$0.5 –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ [{user_id}]")
                bot.send_photo(referer_id, photos.PHOTOS['new_profit'])
    else:
        update_user(user_id, last_activity=datetime.now(tz))
    if not is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì¢", url="https://t.me/NafuzorTime"))
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì¢", url="https://t.me/lixcuk_robot_prime"))
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data="check_sub"))
     
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª!.", reply_markup=markup)
    else:
        show_main_menu(user_id)
        
        
        
        

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    if is_subscribed(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_main_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def back_main(call):
    clear_pending_step(call.message.chat.id)
    show_main_menu(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "add_number")
def add_number_type_choice(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–º–µ—Ä–∞"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–º–∞–∫—Åüñ•Ô∏è", callback_data="add_max"), types.InlineKeyboardButton("–≤—Üüíª", callback_data="add_vc"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['add_number'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["add_max", "add_vc"])
def add_number(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    number_type = 'max' if call.data == "add_max" else 'vc'
    if number_type == 'max':
        caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
    else:
        caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9XXXXXXXXX"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="add_number"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['add_number'], caption=caption), reply_markup=markup)
    register_next_step(call.message.chat.id, process_add_number, call.message.message_id, number_type)

def process_add_number(message, message_id=None, number_type=None):
    phone = message.text.strip()
    if number_type == 'max':
        if not re.match(r'\+7\d{10}', phone):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            add_number_type_choice(_SimpleNS(message=message, from_user=message.from_user, data="add_number"))
            return
    else:
        if len(phone) != 10 or not phone.isdigit() or not phone.startswith('9'):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            add_number_type_choice(_SimpleNS(message=message, from_user=message.from_user, data="add_number"))
            return
    cursor.execute("SELECT * FROM queue WHERE phone_number = ?", (phone,))
    if cursor.fetchone():
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        show_main_menu(message.chat.id)
        return
    cursor.execute("INSERT INTO queue (user_id, phone_number, added_time, type) VALUES (?, ?, ?, ?)", (message.chat.id, phone, datetime.now(tz), number_type))
    conn.commit()
    log_action(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä {phone} —Ç–∏–ø–∞ {number_type}")
    show_main_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "my_numbers")
def my_numbers(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "–ú–æ–∏ –Ω–æ–º–µ—Ä–∞"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ ‚öôÔ∏è", callback_data="my_working"), types.InlineKeyboardButton("–û–∂–∏–¥–∞–µ—Ç ‚è≥", callback_data="my_queue"))
    markup.add(types.InlineKeyboardButton("–£—Å–ø–µ—à–Ω—ã–µ ‚úÖ", callback_data="my_successful"), types.InlineKeyboardButton("–ë–ª–æ–∫ üõë", callback_data="my_blocked"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['my_numbers'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("my_"))
def show_my_list(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    data = call.data
    items = None
    title = None
    if data == "my_queue":
        items = get_user_queue(call.message.chat.id)
        title = "–û–∂–∏–¥–∞–µ—Ç"
    elif data == "my_working":
        items = get_working(call.message.chat.id)
        title = "–í —Ä–∞–±–æ—Ç–µ"
    elif data == "my_successful":
        items = get_successful(call.message.chat.id)
        title = "–£—Å–ø–µ—à–Ω—ã–µ"
    elif data == "my_blocked":
        items = get_blocked(call.message.chat.id)
        title = "–ë–ª–æ–∫"
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    caption = f"{title}\n" + "\n".join(f"{item['phone_number']} ({item['type']})" for item in items) if items else f"{title}: –ü—É—Å—Ç–æ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="my_numbers"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "queue")
def show_queue(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    user = get_user(call.message.chat.id)
    sub = user['subscription_type']
    if sub in ['Gold Tier', 'Prime Plus', 'VIP Nexus']:
        queue = sort_queue(get_queue())
        caption = "–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(f"{item['phone_number']} ({item['type']})" for item in queue) if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
    else:
        caption = f"–û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å: {len(get_queue())}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "stats")
def show_stats(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    stats = get_successful()
    caption = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(f"{get_user(item['user_id'])['username']}-{item['phone_number']} ({item['type']})-—Ö–æ–ª–¥: {item['hold_time']}" for item in stats if item['hold_time'])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    user = get_user(call.message.chat.id)
    username = user['username']
    reputation = user['reputation']
    sub = user['subscription_type'] or ""
    price_hour, price_30 = get_price_increase(sub)
    price_text = f"—á–∞—Å-{price_hour}$ 30–º–∏–Ω-{price_30}$" if sub else ""
    balance = user['balance']
    caption = f"‚ñ∂ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n‚ïì –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n‚ïë\n‚ïö –ü–æ–¥–ø–∏—Å–∫–∞: {sub}\n‚ñ∂ –ü—Ä–∞–π—Å: {price_text}\n‚ïì –ë–∞–ª–∞–Ω—Å: ${balance}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="buy_sub"), types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üîó", callback_data="referral"))
    markup.add(types.InlineKeyboardButton("–ö–∞—Ä—Ç–∞ üí≥", callback_data="card"), types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ üìú", callback_data="rules"))
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —á–µ–∫ üßæ", callback_data="create_check_menu"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['profile'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "rules")
def show_rules(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    rules_text = "<blockquote>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞\n1Ô∏è‚É£ –ß—Ç–æ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ!\n‚ÄºÔ∏è‚ÄºÔ∏è –Æ–ó–´ –ù–ï –ú–ï–ù–Ø–¢–¨, –ö–¢–û –ë–´ –í–ê–ú –ù–ò –ü–ò–°–ê–õ! –ß–¢–û –ë–´ –í–ê–ú –ù–ò –ü–ò–°–ê–õ–ò! ‚ÄºÔ∏è‚ÄºÔ∏è\n‚ÄºÔ∏è‚ÄºÔ∏è –°–ú–ï–ù–ò–¢–ï –Æ–ó ‚Äì –û–°–¢–ê–ù–ï–¢–ï–°–¨ –ë–ï–ó –í–´–ü–õ–ê–¢–´! –ë–£–î–ï–¢–ï –ü–û–¢–û–ú –ñ–ê–õ–û–í–ê–¢–¨–°–Ø! ‚ÄºÔ∏è‚ÄºÔ∏è\n‚ÄºÔ∏è‚ÄºÔ∏è –ï–°–õ–ò –í–ê–° –ü–û –ö–ê–ö–û–ô-–¢–û –ü–†–ò–ß–ò–ù–ï –ó–ê–ë–ê–ù–ò–õ–ò (–†–ï–ö–õ–ê–ú–ê, –°–ö–ê–ú, –ü–ï–†–ï–õ–ò–í –ò –¢.–î.) ‚Äì –õ–ò–®–ï–ù–ò–ï –í–´–ü–õ–ê–¢–´! ‚ÄºÔ∏è‚ÄºÔ∏è\n\n2Ô∏è‚É£ –ï—Å–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä –æ—Ç—Å—Ç–æ—è–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤.\n–ú—ã —Å–∞–º–∏ —Å–∫–∏–Ω–µ–º —Ç–∞–±–µ–ª—å –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—Ç–æ—è–ª –≤–∞—à –Ω–æ–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /hold ‚Äì –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç –Ω–æ–º–µ—Ä –∏ —Ö–æ–ª–¥! üìä\n\n3Ô∏è‚É£ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?\n\n–ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª.\n\n–í–ø–∏—Å—ã–≤–∞–µ—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9XXXXXXXXX.\n\n–ñ–¥—ë—Ç–µ, –ø–æ–∫–∞ –≤–∞—à –Ω–æ–º–µ—Ä –≤–æ–∑—å–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É.\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n‚úÜ (–í–∞—à –Ω–æ–º–µ—Ä) –ó–ê–ü–†–û–° –ê–ö–¢–ò–í–ê–¶–ò–ò\n‚úé –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: 2 –º–∏–Ω—É—Ç—ã\n‚úî –¢–í–û–ô –ö–û–î: (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ—Ç —Å–∫—É–ø–∞)\n\n–ù–∏–∂–µ –±—É–¥—É—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏: ¬´–í–≤—ë–ª¬ª –∏ ¬´–°–∫–∏–ø¬ª.\n\n–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–í–≤—ë–ª¬ª, –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–π–¥—ë—Ç –≤ —Ä–∞–∑–¥–µ–ª ¬´–í —Ä–∞–±–æ—Ç–µ¬ª ‚Äì —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ–¥. ‚úÖ\n\n–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–°–∫–∏–ø¬ª, –Ω–æ–º–µ—Ä —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. ‚ùå\n\n4Ô∏è‚É£ –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞?\n–ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –Ω–æ–º–µ—Ä–∞¬ª –∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç (–≤—Å–µ–≥–æ 4):\n\nüîπ –í —Ä–∞–±–æ—Ç–µ ‚Äì –Ω–æ–º–µ—Ä –µ—â—ë —Å—Ç–æ–∏—Ç.\nüîπ –û–∂–∏–¥–∞–µ—Ç ‚Äì –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏, –µ–≥–æ –µ—â—ë –Ω–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É.\nüîπ –£—Å–ø–µ—à–Ω—ã–µ ‚Äì –Ω–æ–º–µ—Ä —Å —Ö–æ–ª–¥–æ–º –±–æ–ª–µ–µ 54 –º–∏–Ω—É—Ç (–±—É–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞). üí∞\nüîπ –ë–ª–æ–∫ ‚Äì –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª –±–µ–∑ —Ö–æ–ª–¥–∞.\n\n5Ô∏è‚É£ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\nüî∏ /hold ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ö–æ–ª–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å —Ö–æ–ª–¥–æ–º –æ—Ç 54 –º–∏–Ω).\nüî∏ /del ‚Äì —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Ñ–æ—Ä–º–∞—Ç: /del –Ω–æ–º–µ—Ä).\nüî∏ /menu ‚Äì –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.\n\n6Ô∏è‚É£ –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∞–π—Å? üöÄ\n–í –Ω–∞—à–µ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∞–π—Å —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–ø–∏—Å–∫–∏! –¶–µ–Ω—ã –Ω–∏–∑–∫–∏–µ, –∞ –±–æ–Ω—É—Å—ã —Å–æ—á–Ω—ã–µ! üòç\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\nElite Access (+6,4$) üíµ –¶–µ–Ω–∞: 2 USDT\n\nGold Tier (+7$) üí∞ –¶–µ–Ω–∞: 2,3 USDT\n\nPrime Plus (+9$) üöÄ –¶–µ–Ω–∞: 3 USDT\n\nVIP Nexus (+15$) üî• –¶–µ–Ω–∞: 4 USDT\n\n–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 1 –º–µ—Å—è—Ü (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞).</blockquote>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['rules'], caption="–ü—Ä–∞–≤–∏–ª–∞"), reply_markup=markup)
    bot.send_message(call.message.chat.id, rules_text, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == "create_check_menu")
def create_check_menu(call):
    clear_pending_step(call.message.chat.id)
    caption = "üßæ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª—é—Ç—ã –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —á–µ–∫ ‚ûï", callback_data="create_check"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['profile'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "create_check")
def create_check(call):
    clear_pending_step(call.message.chat.id)
    user = get_user(call.from_user.id)
    if user['card_status'] != 'active':
        bot.answer_callback_query(call.id, "–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
    balance = user['card_balance']
    caption = f"üí∞ –ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–ú–∏–Ω. ¬∑1$¬∑", callback_data="check_amount_1"), types.InlineKeyboardButton(f"–ú–∞–∫—Å. ¬∑{balance}$¬∑", callback_data=f"check_amount_{balance}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="create_check_menu"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_check_amount, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_amount_"))
def check_amount(call):
    amount_str = call.data.split("_")[2]
    amount = float(amount_str)
    process_create_check(call.from_user.id, amount, call.message.message_id)

def process_check_amount(message, message_id):
    try:
        amount = float(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        create_check(_SimpleNS(data="create_check", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user))
        return
    process_create_check(message.chat.id, amount, message_id)

def process_create_check(user_id, amount, message_id):
    user = get_user(user_id)
    balance = user['card_balance']
    if amount < 1 or amount > balance:
        bot.send_message(user_id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1$ –¥–æ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
        create_check(_SimpleNS(data="create_check", message=_SimpleNS(chat=_SimpleNS(id=user_id), message_id=message_id), from_user=_SimpleNS(id=user_id)))
        return
    unique_code = str(uuid.uuid4())
    cursor.execute("INSERT INTO checks (creator_id, amount, unique_code) VALUES (?, ?, ?)", (user_id, amount, unique_code))
    conn.commit()
    check_id = cursor.lastrowid
    update_user(user_id, card_balance=balance - amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -amount, datetime.now(tz), 'check_create'))
    conn.commit()
    show_check_options(user_id, check_id, message_id)

def show_check_options(chat_id, check_id, edit_id=None):
    clear_pending_step(chat_id)
    cursor.execute("SELECT * FROM checks WHERE id = ?", (check_id,))
    check = cursor.fetchone()
    if not check:
        bot.send_message(chat_id, "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    columns = [desc[0] for desc in cursor.description]
    check_dict = dict(zip(columns, check))
    amount = check_dict['amount']
    unique_code = check_dict['unique_code']
    link = f"https://t.me/{bot.get_me().username}?start=check_{unique_code}"
    description = check_dict['description'] or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    password = "–î–∞" if check_dict['password'] else "–ù–µ—Ç"
    image = "–î–∞" if check_dict['image_file_id'] else "–ù–µ—Ç"
    subs = json.loads(check_dict['require_subs'] or "[]")
    subs_status = "–í–∫–ª" if subs else "–í—ã–∫–ª"
    premium_status = "–í–∫–ª" if check_dict['require_premium'] else "–í—ã–∫–ª"
    caption = f"üßæ –ú–æ–π —á–µ–∫\nüí∞ –°—É–º–º–∞ —á–µ–∫–∞: {amount}$\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞: {link}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"add_desc_{check_id}"))
    markup.add(types.InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"add_pass_{check_id}"))
    markup.add(types.InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"add_image_{check_id}"))
    markup.add(types.InlineKeyboardButton(f"üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subs_status}", callback_data=f"toggle_subs_{check_id}"))
    markup.add(types.InlineKeyboardButton(f"‚≠ê –¢–æ–ª—å–∫–æ –¥–ª—è Telegram Premium: {premium_status}", callback_data=f"toggle_premium_{check_id}"))
    markup.add(types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–∫–æ–º", callback_data=f"share_check_{check_id}"))
    markup.add(types.InlineKeyboardButton("üî≤ QR-–∫–æ–¥", callback_data=f"qr_check_{check_id}"))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ–∫", callback_data=f"delete_check_{check_id}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="create_check_menu"))
    if edit_id:
        bot.edit_message_caption(caption, chat_id, edit_id, reply_markup=markup)
    else:
        bot.send_message(chat_id, caption, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_desc_"))
def add_desc(call):
    clear_pending_step(call.message.chat.id)
    check_id = int(call.data.split("_")[2])
    caption = "üìù –ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–µ–∫–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤)."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"show_check_{check_id}"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_add_desc, check_id, call.message.message_id)

def process_add_desc(message, check_id, message_id):
    description = message.text
    cursor.execute("UPDATE checks SET description = ? WHERE id = ?", (description, check_id))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    show_check_options(message.chat.id, check_id, message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_pass_"))
def add_pass(call):
    clear_pending_step(call.message.chat.id)
    check_id = int(call.data.split("_")[2])
    caption = "üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª ¬∑–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è¬∑.\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ –≤–∞—à —á–µ–∫ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π.\n¬∑–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –≤ —á–∞—Ç –±–æ—Ç–∞, –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∫–∞–∫ —Ü–∏—Ñ—Ä–∞–º–∏, —Ç–∞–∫ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.\n¬∑–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –Ω–µ—Ç."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"show_check_{check_id}"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_add_pass, check_id, call.message.message_id)

def process_add_pass(message, check_id, message_id):
    password = message.text
    caption = "‚úÖ –ú–æ–ª–æ–¥–µ—Ü, –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–ù–æ –Ω–∞–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä–æ–ª—è.\n¬∑–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_pass_{check_id}_{password}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"show_check_{check_id}"))
    bot.send_message(message.chat.id, caption, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_pass_"))
def confirm_pass(call):
    parts = call.data.split("_")
    check_id = int(parts[2])
    password = "_".join(parts[3:])  # if password has _
    cursor.execute("UPDATE checks SET password = ? WHERE id = ?", (password, check_id))
    conn.commit()
    bot.answer_callback_query(call.id, "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    show_check_options(call.message.chat.id, check_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_image_"))
def add_image(call):
    clear_pending_step(call.message.chat.id)
    check_id = int(call.data.split("_")[2])
    caption = "üñºÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª ¬∑–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏¬∑.\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –≤–∞—à —á–µ–∫.\n¬∑–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ 500 —Ö 500."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"show_check_{check_id}"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_add_image, check_id, call.message.message_id)

def process_add_image(message, check_id, message_id):
    if not message.photo:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
        add_image(_SimpleNS(data=f"add_image_{check_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user))
        return
    file_id = message.photo[-1].file_id
    cursor.execute("UPDATE checks SET image_file_id = ? WHERE id = ?", (file_id, check_id))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    show_check_options(message.chat.id, check_id, message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_subs_"))
def toggle_subs(call):
    clear_pending_step(call.message.chat.id)
    check_id = int(call.data.split("_")[2])
    caption = "üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª ¬∑–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫¬∑.\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π —á–µ–∫–∞.\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—à–µ–≥–æ \"@NFZ_WhatsApp_bot\" –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n¬∑–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–Ø –¥–æ–±–∞–≤–∏–ª\"."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–Ø –¥–æ–±–∞–≤–∏–ª ‚úÖ", callback_data=f"added_bot_subs_{check_id}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"show_check_{check_id}"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("added_bot_subs_"))
def added_bot_subs(call):
    check_id = int(call.data.split("_")[3])
    caption = "‚úÖ –ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏ —Å–¥–µ–ª–∞–ª –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É.\n–í —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: ¬∑Name https://t.me/NafuzorTime\n–í–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"toggle_subs_{check_id}"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_add_sub, check_id, call.message.message_id)

def process_add_sub(message, check_id, message_id):
    text = message.text.strip()
    parts = text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        added_bot_subs(_SimpleNS(data=f"added_bot_subs_{check_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user))
        return
    name = " ".join(parts[:-1])
    url = parts[-1]
    if not url.startswith("https://t.me/"):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        added_bot_subs(_SimpleNS(data=f"added_bot_subs_{check_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user))
        return
    channel = url.split("/")[-1]
    if not channel:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        added_bot_subs(_SimpleNS(data=f"added_bot_subs_{check_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user))
        return
    cursor.execute("SELECT require_subs FROM checks WHERE id = ?", (check_id,))
    subs_json = cursor.fetchone()[0] or "[]"
    subs = json.loads(subs_json)
    subs.append({"name": name, "url": url, "channel": channel})
    cursor.execute("UPDATE checks SET require_subs = ? WHERE id = ?", (json.dumps(subs), check_id))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    show_check_options(message.chat.id, check_id, message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_premium_"))
def toggle_premium(call):
    check_id = int(call.data.split("_")[2])
    cursor.execute("SELECT require_premium FROM checks WHERE id = ?", (check_id,))
    current = cursor.fetchone()[0]
    new = 1 if current == 0 else 0
    cursor.execute("UPDATE checks SET require_premium = ? WHERE id = ?", (new, check_id))
    conn.commit()
    bot.answer_callback_query(call.id, f"‚≠ê –§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è Premium {'–≤–∫–ª—é—á–µ–Ω–∞' if new else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}.")
    show_check_options(call.message.chat.id, check_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("share_check_"))
def share_check(call):
    check_id = int(call.data.split("_")[2])
    cursor.execute("SELECT amount, unique_code FROM checks WHERE id = ?", (check_id,))
    row = cursor.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    amount, unique_code = row
    link = f"https://t.me/{bot.get_me().username}?start=check_{unique_code}"
    caption = f"ü¶ã –ß–µ–∫ –Ω–∞ {amount} USDT ü™ô"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å ‚úÖ", url=link))
    bot.send_message(call.message.chat.id, caption, reply_markup=markup)
    bot.answer_callback_query(call.id, "üì§ –ß–µ–∫ –¥–ª—èÂàÜ‰∫´. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("qr_check_"))
def qr_check(call):
    check_id = int(call.data.split("_")[2])
    cursor.execute("SELECT unique_code FROM checks WHERE id = ?", (check_id,))
    unique_code = cursor.fetchone()[0]
    link = f"https://t.me/{bot.get_me().username}?start=check_{unique_code}"
    qr_url = f"https://quickchart.io/qr?text={requests.utils.quote(link)}&size=200"
    bot.send_photo(call.message.chat.id, qr_url)
    bot.answer_callback_query(call.id, "üî≤ QR-–∫–æ–¥ –¥–ª—è —á–µ–∫–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_check_"))
def delete_check(call):
    check_id = int(call.data.split("_")[2])
    cursor.execute("SELECT creator_id, amount, activated_at FROM checks WHERE id = ?", (check_id,))
    row = cursor.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    creator_id, amount, activated_at = row
    if activated_at:
        bot.answer_callback_query(call.id, "‚ùå –ß–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å.")
        return
    user = get_user(creator_id)
    update_user(creator_id, card_balance=user['card_balance'] + amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (creator_id, amount, datetime.now(tz), 'check_delete'))
    cursor.execute("DELETE FROM checks WHERE id = ?", (check_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "üóëÔ∏è –ß–µ–∫ —É–¥–∞–ª–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    create_check_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_check_"))
def show_check(call):
    check_id = int(call.data.split("_")[2])
    show_check_options(call.message.chat.id, check_id, call.message.message_id)

def handle_check_activation(message, unique_code):
    cursor.execute("SELECT * FROM checks WHERE unique_code = ?", (unique_code,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    columns = [desc[0] for desc in cursor.description]
    check = dict(zip(columns, row))
    if check['activated_at']:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return
    user_id = message.from_user.id
    creator_id = check['creator_id']
    amount = check['amount']
    description = check['description'] or ""
    password = check['password']
    image_file_id = check['image_file_id']
    require_subs = json.loads(check['require_subs'] or "[]")
    require_premium = check['require_premium']
    is_premium = message.from_user.is_premium if hasattr(message.from_user, 'is_premium') else False
    if require_premium and not is_premium and user_id != creator_id:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram Premium.")
        return
    if image_file_id:
        bot.send_photo(message.chat.id, image_file_id)
    caption = f"üßæ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ –Ω–∞ —Å—É–º–º—É {amount}$\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    markup = types.InlineKeyboardMarkup()
    if require_subs:
        caption += "\nüì¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã."
        for sub in require_subs:
            markup.add(types.InlineKeyboardButton(sub['name'], url=sub['url']))
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üîç", callback_data=f"check_subs_activate_{check['id']}"))
        bot.send_message(message.chat.id, caption, reply_markup=markup)
        return
    if password:
        caption += "\nüîë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å."
        bot.send_message(message.chat.id, caption)
        register_next_step(message.chat.id, process_activate_password, check['id'])
        return
    activate_check(user_id, check['id'])

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_subs_activate_"))
def check_subs_activate(call):
    check_id = int(call.data.split("_")[3])
    cursor.execute("SELECT require_subs, password FROM checks WHERE id = ?", (check_id,))
    row = cursor.fetchone()
    require_subs = json.loads(row[0] or "[]")
    password = row[1]
    user_id = call.from_user.id
    all_subbed = True
    for sub in require_subs:
        try:
            member = bot.get_chat_member(f"@{sub['channel']}", user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                all_subbed = False
                break
        except:
            all_subbed = False
            break
    if not all_subbed:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    if password:
        bot.send_message(call.message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        register_next_step(call.message.chat.id, process_activate_password, check_id)
        return
    activate_check(user_id, check_id)
    bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

def process_activate_password(message, check_id):
    password = message.text
    cursor.execute("SELECT password FROM checks WHERE id = ?", (check_id,))
    correct = cursor.fetchone()[0]
    if password != correct:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        register_next_step(message.chat.id, process_activate_password, check_id)
        return
    activate_check(message.chat.id, check_id)

def activate_check(user_id, check_id):
    cursor.execute("SELECT creator_id, amount, activated_at FROM checks WHERE id = ?", (check_id,))
    row = cursor.fetchone()
    if row[2]:  # activated_at
        bot.send_message(user_id, "‚ùå –ß–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return
    creator_id, amount = row[0], row[1]
    user = get_user(user_id)
    update_user(user_id, card_balance=user['card_balance'] + amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, amount, datetime.now(tz), 'check_activate'))
    cursor.execute("UPDATE checks SET activated_by = ?, activated_at = ? WHERE id = ?", (user_id, datetime.now(tz), check_id))
    conn.commit()
    activator_username = user['username']
    creator_username = get_user(creator_id)['username']
    bot.send_message(user_id, f"‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –æ—Ç @{creator_username} –∏ –ø–æ–ª—É—á–∏–ª–∏ {amount} USDT ü™ô.")
    bot.send_message(creator_id, f"‚úÖ @{activator_username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à —á–µ–∫ –∏ –ø–æ–ª—É—á–∏–ª {amount} USDT ü™ô.")

@bot.callback_query_handler(func=lambda call: call.data == "buy_sub")
def buy_sub(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üåüTelegram starsüåü", callback_data="pay_stars"), types.InlineKeyboardButton("üåêCryptoBotüåê", callback_data="pay_crypto"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['buy_sub'], caption=caption), reply_markup=markup)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º SUBSCRIPTIONS –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ config
if not hasattr(config, 'SUBSCRIPTIONS'):
    config.SUBSCRIPTIONS = {
        'Elite Access': {
            'price_increase_hour': 6.4,
            'price_increase_30min': 3.2,
            'price_crypto': 2,
            'price_stars': 30
        },
        'Gold Tier': {
            'price_increase_hour': 7,
            'price_increase_30min': 3.5,
            'price_crypto': 2.3,
            'price_stars': 55
        },
        'Prime Plus': {
            'price_increase_hour': 9,
            'price_increase_30min': 4.5,
            'price_crypto': 3,
            'price_stars': 88
        },
        'VIP Nexus': {
            'price_increase_hour': 15,
            'price_increase_30min': 7.5,
            'price_crypto': 4,
            'price_stars': 299
        }
    }

@bot.callback_query_handler(func=lambda call: call.data == "pay_stars")
def pay_stars(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "üåí–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:\n‚Äî –°–ø–æ—Å–æ–±: üåü Telegram stars üåü"
    markup = types.InlineKeyboardMarkup(row_width=1)
    for sub in config.SUBSCRIPTIONS:
        markup.add(types.InlineKeyboardButton(f"üåë{sub}üåï", callback_data=f"sub_stars_{sub}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="buy_sub"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "pay_crypto")
def pay_crypto(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "üåí–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:\n‚Äî –°–ø–æ—Å–æ–±: üåêCryptoBotüåê"
    markup = types.InlineKeyboardMarkup(row_width=1)
    for sub in config.SUBSCRIPTIONS:
        markup.add(types.InlineKeyboardButton(f"üåë{sub}üåï", callback_data=f"sub_crypto_{sub}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="buy_sub"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_stars_"))
def sub_stars(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    sub_type = call.data.split("_")[2]
    sub = config.SUBSCRIPTIONS.get(sub_type, {})
    price = sub.get('price_stars', 0)
    if price == 0:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    payload = f"sub_{sub_type}_{call.from_user.id}_{random.randint(1, 1000000)}"
    cursor.execute("INSERT INTO payments (user_id, sub_type, amount, payload) VALUES (?, ?, ?, ?)",
                   (call.from_user.id, sub_type, price, payload))
    conn.commit()
    payment_id = cursor.lastrowid
    caption = f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç\n‚Äî –°–ø–æ—Å–æ–±: üåü Telegram stars üåü\n‚Äî –°—É–º–º–∞: {price} Stars"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_stars_inv_{payment_id}"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_stars_{payment_id}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="pay_stars"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_stars_inv_"))
def pay_stars_inv(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payment_id = int(call.data.split("_")[3])
    cursor.execute("SELECT sub_type, payload, amount FROM payments WHERE id = ?", (payment_id,))
    row = cursor.fetchone()
    if row:
        sub_type, payload, amount = row
        prices_list = [types.LabeledPrice(label=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {sub_type}", amount=int(amount))]
        bot.send_invoice(
            call.message.chat.id,
            title=f"–ü–æ–¥–ø–∏—Å–∫–∞ {sub_type}",
            description="–ù–∞ 1 –º–µ—Å—è—Ü",
           
            invoice_payload=payload,
            provider_token='',
            currency='XTR',
            prices=prices_list
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_stars_"))
def check_stars(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payment_id = int(call.data.split("_")[2])
    cursor.execute("SELECT status FROM payments WHERE id = ?", (payment_id,))
    row = cursor.fetchone()
    if row and row[0] == 'paid':
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_crypto_"))
def sub_crypto(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    try:
        sub_type = call.data.split("_")[2]
        sub = config.SUBSCRIPTIONS.get(sub_type, {})
        price = sub.get('price_crypto', 0)
        
        if price == 0:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        payload = f"sub_{sub_type}_{call.from_user.id}_{random.randint(1, 1000000)}"
        asset = 'USDT'
        description = f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {sub_type} –Ω–∞ 1 –º–µ—Å—è—Ü"

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        headers = {
            'Crypto-Pay-API-Token': config.CRYPTO_TOKEN,
            'Content-Type': 'application/json'
        }
        
        data = {
            'asset': asset,
            'amount': str(price),
            'description': description,
            'payload': payload
        }

        response = requests.post('https://pay.crypt.bot/api/createInvoice', 
                               headers=headers,
                               json=data)

        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                invoice = data['result']
                invoice_id = invoice['invoice_id']
                pay_url = invoice['pay_url']

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                cursor.execute("INSERT INTO payments (user_id, sub_type, amount, invoice_id) VALUES (?, ?, ?, ?)",
                               (call.from_user.id, sub_type, price, invoice_id))
                conn.commit()
                payment_id = cursor.lastrowid

                caption = f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç\n‚Äî –°–ø–æ—Å–æ–±: üåêCryptoBotüåê\n‚Äî –°—É–º–º–∞: {price} USDT"
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url))
                markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_crypto_{payment_id}"))
                markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="pay_crypto"))
                bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
            else:
                error_msg = data.get('error', {}).get('name', 'Unknown error')
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ CryptoBot: {error_msg}", show_alert=True)
                print(f"CryptoBot createInvoice error: {data}")
        else:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ API: {response.status_code}", show_alert=True)
            print(f"CryptoBot createInvoice HTTP error: {response.status_code} - {response.text}")
            
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        print(f"Exception in sub_crypto: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_crypto_"))
def check_crypto(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    try:
        payment_id = int(call.data.split("_")[2])
        cursor.execute("SELECT invoice_id FROM payments WHERE id = ?", (payment_id,))
        row = cursor.fetchone()
        if not row:
            bot.answer_callback_query(call.id, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        invoice_id = row[0]

        headers = {
            'Crypto-Pay-API-Token': config.CRYPTO_TOKEN,
            'Content-Type': 'application/json'
        }

        response = requests.get(f'https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}', 
                              headers=headers)

        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                invoices = data['result']['items']
                if invoices:
                    status = invoices[0]['status']
                    if status == 'paid':
                        cursor.execute("SELECT user_id, sub_type FROM payments WHERE id = ? AND status = 'pending'", (payment_id,))
                        row = cursor.fetchone()
                        if row:
                            user_id, sub_type = row
                            end = datetime.now(tz) + timedelta(days=30)
                            update_user(user_id, subscription_type=sub_type, subscription_end=end)
                            cursor.execute("UPDATE payments SET status = 'paid' WHERE id = ?", (payment_id,))
                            conn.commit()
                            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                            bot.send_message(call.message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ {sub_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
                        else:
                            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
                    else:
                        bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                else:
                    bot.answer_callback_query(call.id, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            else:
                error_msg = data.get('error', {}).get('name', 'Unknown error')
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ API: {error_msg}", show_alert=True)
                print(f"CryptoBot getInvoices error: {data}")
        else:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code}", show_alert=True)
            print(f"CryptoBot getInvoices HTTP error: {response.status_code} - {response.text}")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        print(f"Exception in check_crypto: {e}")

@bot.pre_checkout_query_handler(func=lambda query: True)
def pre_checkout(query):
    bot.answer_pre_checkout_query(query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    clear_pending_step(message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payload = message.successful_payment.invoice_payload
    if payload.startswith('sub_'):
        parts = payload.split('_')
        sub_type = parts[1]
        user_id = int(parts[2])
        if user_id == message.from_user.id:
            end = datetime.now(tz) + timedelta(days=30)
            update_user(user_id, subscription_type=sub_type, subscription_end=end)
            cursor.execute("UPDATE payments SET status = 'paid', transaction_id = ? WHERE payload = ?", (message.successful_payment.telegram_payment_charge_id, payload))
            conn.commit()
            bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ {sub_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    elif payload.startswith('deposit_'):
        cursor.execute("SELECT id, user_id, amount FROM payments WHERE payload = ? AND sub_type = 'deposit' AND status = 'pending'", (payload,))
        row = cursor.fetchone()
        if row:
            payment_id, user_id, amount = row
            if user_id == message.from_user.id:
                cursor.execute("UPDATE payments SET status = 'paid', transaction_id = ? WHERE id = ?", (message.successful_payment.telegram_payment_charge_id, payment_id))
                conn.commit()
                deposit_amount = amount / 2  # 2 stars = 1$
                user = get_user(user_id)
                update_user(user_id, card_balance=user['card_balance'] + deposit_amount)
                cursor.execute("INSERT INTO deposit_history (user_id, amount, created_at, request_id) VALUES (?, ?, ?, ?)",
                               (user_id, deposit_amount, datetime.now(tz), payment_id))
                conn.commit()
                bot.send_message(message.chat.id, f"–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {deposit_amount}$!")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–∞—Ä—Ç—É
                display_card(message.chat.id, message.message_id)



# Assuming the truncated part includes the payment handlers, etc.

@bot.callback_query_handler(func=lambda call: call.data == "referral")
def show_referral(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    user = get_user(call.message.chat.id)
    referrals = user['referrals_count']
    balance = user['balance']
    ref_link = f"https://t.me/{bot.get_me().username}?start={user['referral_code']}"
    caption = f"üíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n<blockquote>üìî –ù–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. \n–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º ‚Äî –∏ –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 0.5$ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.</blockquote>\n\nüîó –°—Å—ã–ª–∫–∞: {ref_link}\n\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {balance}$\n\nüë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É üí∏", callback_data="withdraw"), types.InlineKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏ üìã", callback_data="requests_list"))
    markup.row(types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–πüíæ", callback_data="deposit_history"))
    markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['referral'], caption=caption, parse_mode='HTML'), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "deposit_history")
def show_deposit_history(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    user_id = call.from_user.id
    cursor.execute("SELECT id, amount, paid_at FROM withdraw_requests WHERE user_id = ? AND status = 'paid' ORDER BY paid_at DESC", (user_id,))
    requests = cursor.fetchall()
    caption = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π:"
    markup = types.InlineKeyboardMarkup(row_width=1)
    if requests:
        for req in requests:
            markup.add(types.InlineKeyboardButton(f"üñ•Ô∏è{req[1]}$", callback_data=f"view_deposit_{req[0]}"))
    else:
        caption += "\n\n–ù–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏–π"
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="referral"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_deposit_"))
def view_deposit(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    req_id = int(call.data.split("_")[2])
    cursor.execute("SELECT amount, paid_at, id FROM withdraw_requests WHERE id = ? AND user_id = ?", (req_id, call.from_user.id))
    req = cursor.fetchone()
    if not req:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    dt = req[1].astimezone(tz).strftime('%Y-%m-%d %H:%M:%S') if req[1] else 'N/A'
    caption = f"üóíÔ∏è–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: \n\nüí≤–°—É–º–º–∞: {req[0]}\nüóìÔ∏è–î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {dt}\nüìü–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {req[2]}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="deposit_history"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "requests_list")
def show_my_requests(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    user_id = call.from_user.id
    cursor.execute("SELECT id, amount, status, created_at FROM withdraw_requests WHERE user_id = ? AND status = 'pending' ORDER BY id DESC", (user_id,))
    requests = cursor.fetchall()
    caption = "–ú–æ–∏ –∑–∞—è–≤–∫–∏:"
    markup = types.InlineKeyboardMarkup(row_width=1)
    if requests:
        for req in requests:
            markup.add(types.InlineKeyboardButton(f"üñ•Ô∏è –ó–∞—è–≤–∫–∞ ‚Ññ{req[0]:06d}", callback_data=f"view_request_{req[0]}"))
    else:
        caption += "\n\n–ù–µ—Ç –∑–∞—è–≤–æ–∫"
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="referral"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_request_"))
def view_request(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    req_id = int(call.data.split("_")[2])
    cursor.execute("SELECT * FROM withdraw_requests WHERE id = ?", (req_id,))
    req = cursor.fetchone()
    if not req or req[1] != call.from_user.id:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    user = get_user(req[1])
    dt = req[4].astimezone(tz).strftime('%Y-%m-%d %H:%M:%S') if req[4] else 'N/A'
    caption = f"üíæ–ó–∞—è–≤–∫–∞ ‚Ññ{req[0]:06d}\n\nüóíÔ∏è–ë–ª–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n\nüîπ–Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\nüîπ–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: ${req[2]}\nüîπ–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {dt}"
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data=f"edit_amount_{req[0]}"))
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_request_{req[0]}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="requests_list"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_amount_"))
def edit_amount(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    req_id = int(call.data.split("_")[2])
    caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=f"view_request_{req_id}"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_edit_amount, call.message.message_id, req_id)

def process_edit_amount(message, message_id, req_id):
    try:
        new_amount = float(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        fake_call = _SimpleNS(data=f"view_request_{req_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
        view_request(fake_call)
        return
    if new_amount < 50:
        bot.send_message(message.chat.id, "–°—É–º–º–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞")
        fake_call = _SimpleNS(data=f"view_request_{req_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
        view_request(fake_call)
        return
    cursor.execute("SELECT amount, user_id FROM withdraw_requests WHERE id = ?", (req_id,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    old_amount, user_id = row
    user = get_user(user_id)
    diff = new_amount - old_amount
    if diff > 0:
        if user['balance'] < diff:
            bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            fake_call = _SimpleNS(data=f"view_request_{req_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
            view_request(fake_call)
            return
        update_user(user_id, balance=user['balance'] - diff)
    elif diff < 0:
        update_user(user_id, balance=user['balance'] - diff)  # - negative = +
    cursor.execute("UPDATE withdraw_requests SET amount = ? WHERE id = ?", (new_amount, req_id))
    conn.commit()
    bot.send_message(message.chat.id, "–°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
    fake_call = _SimpleNS(data=f"view_request_{req_id}", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
    view_request(fake_call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("close_request_"))
def close_request(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    req_id = int(call.data.split("_")[2])
    cursor.execute("SELECT amount, user_id, status FROM withdraw_requests WHERE id = ?", (req_id,))
    row = cursor.fetchone()
    if not row or row[2] != 'pending':
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
        return
    amount, user_id = row[0], row[1]
    user = get_user(user_id)
    update_user(user_id, balance=user['balance'] + amount)
    cursor.execute("UPDATE withdraw_requests SET status = 'closed' WHERE id = ?", (req_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    show_my_requests(call)

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    user = get_user(call.message.chat.id)
    if user['balance'] < 50:
        bot.answer_callback_query(call.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ $50", show_alert=True)
        return
    caption = "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="referral"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['referral'], caption=caption), reply_markup=markup)
    register_next_step(call.message.chat.id, process_withdraw, call.message.message_id)

def process_withdraw(message, message_id):
    try:
        amount = float(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        fake_call = _SimpleNS(data="referral", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
        show_referral(fake_call)
        return
    user = get_user(message.chat.id)
    if amount > user['balance'] or amount < 50:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞")
        fake_call = _SimpleNS(data="referral", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
        show_referral(fake_call)
        return
    cursor.execute("INSERT INTO withdraw_requests (user_id, amount, created_at) VALUES (?, ?, ?)", (message.chat.id, amount, datetime.now(tz)))
    conn.commit()
    update_user(message.chat.id, balance=user['balance'] - amount)
    bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    fake_call = _SimpleNS(data="referral", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
    show_referral(fake_call)



@bot.callback_query_handler(func=lambda call: call.data == "card")
def show_card(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –≤–æ–∑–º–æ–∂–Ω—ã–º input
    user = get_user(call.message.chat.id)
    if user['card_status'] == 'blocked':
        if user['block_reason'] == 'admin':
            caption = "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
            bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
            return
        elif user['block_reason'] == 'user':
            if user['card_activation_date'] and (datetime.now(tz) - user['card_activation_date']) >= timedelta(days=30):
                update_user(call.message.chat.id, card_status='inactive', block_reason=None)
                user = get_user(call.message.chat.id)  # Reload user
            else:
                remaining = timedelta(days=30) - (datetime.now(tz) - user['card_activation_date'])
                caption = f"–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π. –û—Å—Ç–∞–ª–æ—Å—å: {remaining.days} –¥–Ω–µ–π"
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
                bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
                return

    if user['card_status'] == 'inactive':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å üîì", callback_data="activate_card"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
        bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['card'], caption="–ö–∞—Ä—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"), reply_markup=markup)
        return

    # active
    caption = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–∞—Ä—Ç—ã"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['card'], caption=caption), reply_markup=markup)
    register_next_step(call.message.chat.id, check_card_password, call.message.message_id)

def check_card_password(message, message_id):
    user = get_user(message.chat.id)
    if message.text != user['card_password']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        show_profile(_SimpleNS(message=message, from_user=message.from_user, data="profile"))
        return
    display_card(message.chat.id, message_id)

def display_card(chat_id, edit_id):
    clear_pending_step(chat_id)  # –û—á–∏—â–∞–µ–º pending
    user = get_user(chat_id)
    card_num = user['card_number']
    cvv = user['cvv']
    balance = user['card_balance']
    status = '–∞–∫—Ç–∏–≤–Ω–∞' if user['card_status'] == 'active' else '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'
    if not user.get('api_token'):
        api_token = generate_api_token(chat_id)
        update_user(chat_id, api_token=api_token)
    caption = f"üí≥–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_num}\n‚öôÔ∏èCVV: {cvv}\nüí∞–±–∞–ª–∞–Ω—Å: {balance}\nüíæ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ: {status}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="card_settings"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=chat_id, message_id=edit_id, media=types.InputMediaPhoto(photos.PHOTOS['card'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_card_no_pass")
def back_card_no_pass(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    display_card(call.message.chat.id, call.message.message_id)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@bot.callback_query_handler(func=lambda call: call.data == "card_settings")
def card_settings(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("API token üîë", callback_data="api_card"),
               types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìú", callback_data="card_history_user"))
    markup.row(types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç üí∞", callback_data="deposit_card"))
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ üí∏", callback_data="transfer_money"),
               types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É üõë", callback_data="block_card"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_card_no_pass"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "deposit_card")
def deposit_card(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("‚≠ê Telegram Stars", callback_data="deposit_stars"),
               types.InlineKeyboardButton("üåê Crypto Bot", callback_data="deposit_crypto"))
    markup.row(types.InlineKeyboardButton("üìä –ö—É—Ä—Å", callback_data="deposit_rates"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "deposit_rates")
def deposit_rates(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    caption = "¬ª–∫—É—Ä—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è¬´\n\n–∑–≤—ë–∑–¥–∞–º–∏¬ª 2üåü = 1$ | –º–∏–Ω.—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10$\n\n–∫—Ä–∏–ø—Ç–∞¬ª 2$ = 2$ | –º–∏–Ω.—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10$"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="deposit_card"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "deposit_stars")
def deposit_stars(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    caption = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $ (–º–∏–Ω–∏–º—É–º 10$)"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="deposit_card"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_deposit_stars, call.message.message_id)

def process_deposit_stars(message, message_id):
    try:
        deposit_amount = float(message.text)
        if deposit_amount < 10:
            bot.send_message(message.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10$")
            fake_call = _SimpleNS(data="deposit_stars", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
            deposit_stars(fake_call)
            return
        stars_amount = int(deposit_amount * 2)  # 2 stars = 1$
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        fake_call = _SimpleNS(data="deposit_stars", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
        deposit_stars(fake_call)
        return
    payload = f"deposit_{message.chat.id}_{random.randint(1, 1000000)}"
    cursor.execute("INSERT INTO payments (user_id, sub_type, amount, payload) VALUES (?, ?, ?, ?)",
                   (message.chat.id, 'deposit', stars_amount, payload))
    conn.commit()
    payment_id = cursor.lastrowid
    created_at = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')
    caption = f"üè¶ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ‚≠ê Telegram Stars\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {stars_amount} Stars\nüìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n‚è∞ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 120 –º–∏–Ω—É—Ç."
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ", callback_data=f"pay_deposit_stars_{payment_id}"),
               types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîç", callback_data=f"check_deposit_stars_{payment_id}"))
    markup.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="deposit_card"))
    bot.edit_message_caption(caption, message.chat.id, message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_deposit_stars_"))
def pay_deposit_stars(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payment_id = int(call.data.split("_")[3])
    cursor.execute("SELECT payload, amount FROM payments WHERE id = ? AND sub_type = 'deposit'", (payment_id,))
    row = cursor.fetchone()
    if row:
        payload, amount = row
        prices_list = [types.LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞", amount=int(amount))]
        bot.send_invoice(
            call.message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞",
            description="–ß–µ—Ä–µ–∑ Telegram Stars",
            invoice_payload=payload,
            provider_token='',
            currency='XTR',
            prices=prices_list
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_deposit_stars_"))
def check_deposit_stars(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payment_id = int(call.data.split("_")[3])
    cursor.execute("SELECT status FROM payments WHERE id = ? AND sub_type = 'deposit'", (payment_id,))
    row = cursor.fetchone()
    if row and row[0] == 'paid':
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.")
        display_card(call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "deposit_crypto")
def deposit_crypto(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    caption = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $ (–º–∏–Ω–∏–º—É–º 10$)"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="deposit_card"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_deposit_crypto, call.message.message_id)

def process_deposit_crypto(message, message_id):
    try:
        deposit_amount = float(message.text)
        if deposit_amount < 10:
            bot.send_message(message.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10$")
            fake_call = _SimpleNS(data="deposit_crypto", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
            deposit_crypto(fake_call)
            return
        usdt_amount = deposit_amount  # 1:1
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        fake_call = _SimpleNS(data="deposit_crypto", message=_SimpleNS(chat=_SimpleNS(id=message.chat.id), message_id=message_id), from_user=message.from_user)
        deposit_crypto(fake_call)
        return
    
    payload = f"deposit_{message.chat.id}_{random.randint(1, 1000000)}"
    asset = 'USDT'
    description = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot"

    headers = {
        'Crypto-Pay-API-Token': config.CRYPTO_TOKEN,
        'Content-Type': 'application/json'
    }
    
    data = {
        'asset': asset,
        'amount': str(usdt_amount),
        'description': description,
        'payload': payload
    }

    response = requests.post('https://pay.crypt.bot/api/createInvoice', headers=headers, json=data)

    if response.status_code == 200:
        resp_data = response.json()
        if resp_data.get('ok'):
            invoice = resp_data['result']
            invoice_id = invoice['invoice_id']
            pay_url = invoice['pay_url']

            cursor.execute("INSERT INTO payments (user_id, sub_type, amount, invoice_id, payload) VALUES (?, ?, ?, ?, ?)",
                           (message.chat.id, 'deposit', usdt_amount, invoice_id, payload))
            conn.commit()
            payment_id = cursor.lastrowid

            created_at = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')
            caption = f"üè¶ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üåê Crypto Bot\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {usdt_amount} USDT\nüìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n‚è∞ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 120 –º–∏–Ω—É—Ç."
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ", url=pay_url),
                       types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîç", callback_data=f"check_deposit_crypto_{payment_id}"))
            markup.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="deposit_card"))
            bot.edit_message_caption(caption, message.chat.id, message_id, reply_markup=markup)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞", show_alert=True)
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_deposit_crypto_"))
def check_deposit_crypto(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payment_id = int(call.data.split("_")[3])
    cursor.execute("SELECT invoice_id, status FROM payments WHERE id = ? AND sub_type = 'deposit'", (payment_id,))
    row = cursor.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    invoice_id, status = row
    if status == 'paid':
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
        return

    headers = {
        'Crypto-Pay-API-Token': config.CRYPTO_TOKEN,
        'Content-Type': 'application/json'
    }

    response = requests.get(f'https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}', headers=headers)

    if response.status_code == 200:
        data = response.json()
        if data.get('ok'):
            invoices = data['result']['items']
            if invoices and invoices[0]['status'] == 'paid':
                cursor.execute("UPDATE payments SET status = 'paid' WHERE id = ?", (payment_id,))
                conn.commit()
                cursor.execute("SELECT user_id, amount FROM payments WHERE id = ?", (payment_id,))
                user_id, amount = cursor.fetchone()
                user = get_user(user_id)
                update_user(user_id, card_balance=user['card_balance'] + (amount / 1))  # 1:1 –¥–ª—è crypto
                cursor.execute("INSERT INTO deposit_history (user_id, amount, created_at, request_id) VALUES (?, ?, ?, ?)",
                               (user_id, amount, datetime.now(tz), payment_id))
                conn.commit()
                bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.")
                display_card(call.message.chat.id, call.message.message_id)
            else:
                bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ API", show_alert=True)
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", show_alert=True)

# –û–±–Ω–æ–≤–ª—è–µ–º successful_payment –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ deposit
@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    clear_pending_step(message.chat.id)  # –û—á–∏—â–∞–µ–º pending
    payload = message.successful_payment.invoice_payload
    cursor.execute("SELECT id, user_id, amount FROM payments WHERE payload = ? AND sub_type = 'deposit' AND status = 'pending'", (payload,))
    row = cursor.fetchone()
    if row:
        payment_id, user_id, amount = row
        if user_id == message.from_user.id:
            cursor.execute("UPDATE payments SET status = 'paid', transaction_id = ? WHERE id = ?", (message.successful_payment.telegram_payment_charge_id, payment_id))
            conn.commit()
            deposit_amount = amount / 2  # 2 stars = 1$
            user = get_user(user_id)
            update_user(user_id, card_balance=user['card_balance'] + deposit_amount)
            cursor.execute("INSERT INTO deposit_history (user_id, amount, created_at, request_id) VALUES (?, ?, ?, ?)",
                           (user_id, deposit_amount, datetime.now(tz), payment_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {deposit_amount}$!")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–∞—Ä—Ç—É
            display_card(message.chat.id, message.message_id)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@bot.callback_query_handler(func=lambda call: call.data == "transfer_money")
def transfer_money(call):
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Å—É–º–º–∞"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, process_transfer_money, call.message.message_id)

def process_transfer_money(message, message_id):
    text = message.text.split()
    if len(text) != 2 or not text[1].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        card_settings(_SimpleNS(message=message, from_user=message.from_user, data="card_settings"))
        return
    to_username = text[0].lstrip('@')
    amount = float(text[1])
    from_user = get_user(message.chat.id)
    if amount > from_user['card_balance'] or amount <= 0:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
        card_settings(_SimpleNS(message=message, from_user=message.from_user, data="card_settings"))
        return
    cursor.execute("SELECT id FROM users WHERE username = ?", (to_username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        card_settings(_SimpleNS(message=message, from_user=message.from_user, data="card_settings"))
        return
    to_user_id = row[0]
    if to_user_id == from_user['id']:
        bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ")
        card_settings(_SimpleNS(message=message, from_user=message.from_user, data="card_settings"))
        return
    to_user = get_user(to_user_id)
    if to_user['card_status'] != 'active':
        bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã")
        card_settings(_SimpleNS(message=message, from_user=message.from_user, data="card_settings"))
        return
    caption = f"–Æ–∑–µ—Ä–Ω–µ–π–º: {to_username}\n–°—É–º–º–∞: {amount}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚úÖ", callback_data=f"confirm_transfer_{to_user_id}_{amount}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="card_settings"))
    bot.edit_message_caption(caption, message.chat.id, message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_transfer_"))
def confirm_transfer(call):
    parts = call.data.split("_")
    to_user_id = int(parts[2])
    amount = float(parts[3])
    from_user_id = call.from_user.id
    from_user = get_user(from_user_id)
    if to_user_id == from_user_id:
        bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ", show_alert=True)
        return
    if amount > from_user['card_balance']:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    to_user = get_user(to_user_id)
    update_user(from_user_id, card_balance=from_user['card_balance'] - amount)
    update_user(to_user_id, card_balance=to_user['card_balance'] + amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (from_user_id, -amount, datetime.now(tz), 'transfer_out'))
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (to_user_id, amount, datetime.now(tz), 'transfer_in'))
    cursor.execute("INSERT INTO transfers (from_user_id, to_user_id, amount, timestamp) VALUES (?, ?, ?, ?)", (from_user_id, to_user_id, amount, datetime.now(tz)))
    conn.commit()
    # Notify receiver
    notify_caption = f"–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n–Æ–∑–µ—Ä–Ω–µ–π–º: {from_user['username']}\n–°—É–º–º–∞: {amount}\n–î–∞—Ç–∞: {datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')}"
    bot.send_message(to_user_id, notify_caption)
    bot.answer_callback_query(call.id, "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    # Return to card display without check photo
    display_card(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "card_history_user")
def card_history_user(call):
    user_id = call.from_user.id
    cursor.execute("SELECT amount, timestamp, type, id FROM card_history WHERE user_id = ? ORDER BY timestamp DESC", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        caption = "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
    else:
        caption = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:"
    markup = types.InlineKeyboardMarkup()
    for row in rows:
        if row[2] in ['deposit', 'transfer_in']:
            sign = '+'
        else:
            sign = '-'
        dt = row[1] if not isinstance(row[1], str) else datetime.fromisoformat(row[1])
        if row[2] == 'transfer_in':
            cursor.execute("SELECT from_user_id FROM transfers WHERE to_user_id=? AND amount=? AND timestamp=?", (user_id, row[0], row[1]))
            tr = cursor.fetchone()
            other = get_user(tr[0])['username'] if tr else ''
            text = f"{sign}{abs(row[0])} {dt.strftime('%Y-%m-%d %H:%M')} –æ—Ç {other}"
        elif row[2] == 'transfer_out':
            cursor.execute("SELECT to_user_id FROM transfers WHERE from_user_id=? AND amount=? AND timestamp=?", (user_id, -row[0], row[1]))
            tr = cursor.fetchone()
            other = get_user(tr[0])['username'] if tr else ''
            text = f"{sign}{abs(row[0])} {dt.strftime('%Y-%m-%d %H:%M')} –∫–æ–º—É {other}"
        else:
            text = f"{sign}{abs(row[0])} {dt.strftime('%Y-%m-%d %H:%M')} {row[2]}"
        markup.add(types.InlineKeyboardButton(text, callback_data=f"dummy_history_{row[3]}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("dummy_history_"))
def dummy_history(call):
    bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=False)

@bot.callback_query_handler(func=lambda call: call.data == "activate_card")
def activate_card(call):
    user = get_user(call.message.chat.id)
    if user['card_status'] != 'inactive':
        bot.answer_callback_query(call.id, "–ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
        return
    clear_pending_step(call.message.chat.id)  # –û—á–∏—â–∞–µ–º pending –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º input
    caption = "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∏–∑ 4 —Ü–∏—Ñ—Ä"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    register_next_step(call.message.chat.id, set_card_password, call.message.message_id)

def set_card_password(message, message_id):
    password = message.text
    if not password.isdigit() or len(password) != 4:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        show_card(_SimpleNS(message=message, from_user=message.from_user, data="card"))
        return
    user_id = message.chat.id
    card_num = generate_card_number()
    cvv = generate_cvv()
    api_token = generate_api_token(user_id)
    update_user(user_id, card_number=card_num, cvv=cvv, card_status='active', card_password=password, card_activation_date=datetime.now(tz), api_token=api_token)
    display_card(user_id, message_id)

@bot.callback_query_handler(func=lambda call: call.data == "block_card")
def block_card(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_block_card"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="card_settings"))
    bot.edit_message_caption("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_block_card")
def confirm_block_card(call):
    user_id = call.from_user.id
    user = get_user(user_id)
    balance = user['card_balance']
    if balance > 0:
        cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -balance, datetime.now(tz), 'withdraw'))
        conn.commit()
    update_user(user_id, card_status='blocked', block_reason='user', card_balance=0, card_activation_date=datetime.now(tz))
    bot.edit_message_caption("–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –±–∞–ª–∞–Ω—Å —Å–ø–∏—Å–∞–Ω", call.message.chat.id, call.message.message_id)
    show_card(call)

@bot.callback_query_handler(func=lambda call: call.data == "api_card")
def api_card(call):
    user = get_user(call.from_user.id)
    api_token = user.get('api_token')
    caption = f"üîë –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Lixcuk_robot:\n<code>{api_token}</code>\n<blockquote>‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –≤ Lixcuk_robot. –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ.</blockquote>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å API", callback_data="reset_api"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "reset_api")
def reset_api(call):
    user_id = call.from_user.id
    new_token = generate_api_token(user_id)
    update_user(user_id, api_token=new_token)
    api_card(call)




@bot.message_handler(content_types=['text'])
def handle_pending(message):
    chat_id = message.chat.id
    if chat_id in pending_steps:
        handler, args = pending_steps.pop(chat_id)
        handler(message, *args)
        return
    # –ï—Å–ª–∏ –Ω–µ—Ç pending, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
    help_text = "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n üîÉ /start-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n üó£Ô∏è /hold- —Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ–ª–¥—ã\n üóëÔ∏è/del- —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä\n üîÑ/menu- –æ–±–Ω–æ–≤–∞–∏—Ç—å –º–µ–Ω—é"
    bot.send_message(chat_id, help_text)

@bot.message_handler(commands=['hold'])
def hold(message):
    clear_pending_step(message.chat.id)
    successful = get_successful(message.chat.id)
    text = "\n".join(f"{item['phone_number']} ({item['type']}) —Ö–æ–ª–¥: {item['hold_time']}" for item in successful if item['hold_time'])
    bot.send_message(message.chat.id, text or f"–ù–µ—Ç —Ö–æ–ª–¥–æ–≤ >= {MIN_HOLD_MINUTES} –º–∏–Ω")

@bot.message_handler(commands=['del'])
def del_number(message):
    clear_pending_step(message.chat.id)
    phone = message.text.split()[1] if len(message.text.split()) > 1 else None
    if not phone:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç /del –Ω–æ–º–µ—Ä")
        return
    cursor.execute("DELETE FROM queue WHERE phone_number = ? AND user_id = ?", (phone, message.chat.id))
    conn.commit()
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω" if cursor.rowcount > 0 else "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    log_action(message.chat.id, f"–£–¥–∞–ª–∏–ª –Ω–æ–º–µ—Ä {phone}")

@bot.message_handler(commands=['menu'])
def menu(message):
    clear_pending_step(message.chat.id)
    show_main_menu(message.chat.id)

@bot.inline_handler(func=lambda query: True)
def inline_query(query):
    if not query.query.replace('.', '', 1).isdigit():
        return
    amount = float(query.query)
    user_id = query.from_user.id
    user = get_user(user_id)
    if not user or user['card_status'] != 'active' or amount < 1 or amount > user['card_balance']:
        results = [types.InlineQueryResultArticle(id=str(uuid.uuid4()), title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", input_message_content=types.InputTextMessageContent("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞."))]
        bot.answer_inline_query(query.id, results)
        return
    unique_code = str(uuid.uuid4())
    cursor.execute("INSERT INTO checks (creator_id, amount, unique_code) VALUES (?, ?, ?)", (user_id, amount, unique_code))
    conn.commit()
    check_id = cursor.lastrowid
    update_user(user_id, card_balance=user['card_balance'] - amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -amount, datetime.now(tz), 'check_create_inline'))
    conn.commit()
    link = f"https://t.me/{bot.get_me().username}?start=check_{unique_code}"
    caption = f"ü¶ã –ß–µ–∫ –Ω–∞ {amount} USDT ü™ô"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å ‚úÖ", url=link))
    results = [types.InlineQueryResultArticle(id=str(uuid.uuid4()), title=f"–ß–µ–∫ –Ω–∞ {amount} USDT", input_message_content=types.InputTextMessageContent(caption), reply_markup=markup)]
    bot.answer_inline_query(query.id, results)

bot.infinity_polling()